#! /usr/bin/env python2

import sys, json, struct
import hashlib
import os
import subprocess
import recoll

# Hardcode the recoll index path
archive_path = os.environ["HOME"] + "/.recollweb/ToIndex"

# Read a message from stdin and decode it.
def getMessage():
  rawLength = sys.stdin.read(4)
  if len(rawLength) == 0:
      sys.exit(0)
  messageLength = struct.unpack('@I', rawLength)[0]
  message = sys.stdin.read(messageLength)
  return json.loads(message)

def encodeMessage(messageContent):
  encodedContent = json.dumps(messageContent)
  encodedLength = struct.pack('@I', len(encodedContent))
  return {'length': encodedLength, 'content': encodedContent}

# Send an encoded message to stdout
def sendMessage(encodedMessage):
  sys.stdout.write(encodedMessage['length'])
  sys.stdout.write(encodedMessage['content'])
  sys.stdout.flush()

def archive(message):
  path = archive_path
  url = message["url"]
  name = "firefox-recoll-web-" + hashlib.md5(url.encode('utf-8')).hexdigest()
  html = open(os.path.join(path, name), "w")
  html.write(message["page"].encode(encoding='utf-8'))
  html.close()
  meta = open(os.path.join(path, '.' + name), "w")
  meta_content = [url,
                  "WebHistory",
                  message["mime"],
                  "k:_unindex:encoding=" + message["charset"],
                  ""]
  meta.write("\n".join(meta_content))
  meta.close()

def search(message):
  db = recoll.connect()
  query = db.query()
  query_string = message['query']
  query.execute('rclbes:BGL ' + query_string)
  if query.rowcount == 0:
    return
  result = []
  for doc in query:
    entry = doc.items()
    entry['snippet'] = query.highlight(query.makedocabstract(doc))
    entry['query'] = query_string
    sendMessage(encodeMessage(entry))

def omnisearch(message):
  db = recoll.connect()
  query = db.query()
  query_string = message['query']
  query.execute('rclbes:BGL ' + query_string)
  if query.rowcount == 0:
    sendMessage(encodeMessage(message))
    return
  result = []
  for doc in query:
    entry = doc.items()
    result.append(entry)
  message['result'] = result
  sendMessage(encodeMessage(message))

# sys.stderr = open(os.environ["HOME"] + "/log/archive.errors", "a")
# Always listen for messages
while True:
  message = getMessage()
  action = message["type"]
  if action == "archive":
    archive(message)
  elif action == "search":
    search(message)
  elif action == "omnibox":
    omnisearch(message)
